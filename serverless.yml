service: personal-backend-service
frameworkVersion: '3'
plugins:
  - serverless-offline
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerImage: public.ecr.aws/sam/build-python3.12
    dockerizePip: 'non-linux'
    dockerRunCmdExtraArgs: ['--platform', 'linux/amd64']
    layer: true
    zip: true
functions:
  fastapi:
    environment:
      APP_NAME: ${env:APP_NAME}
      APP_TIMEZONE: ${env:APP_TIMEZONE}
      CACHE_SERVICE_BASE_URL: ${env:CACHE_SERVICE_BASE_URL}
      DEBUG: ${env:DEBUG}
      JWT_SECRET: ${env:JWT_SECRET}
      LOG_LEVEL: DEBUG
      POWERTOOLS_LOGGER_LOG_EVENT: true
      POWERTOOLS_SERVICE_NAME: personal-backend-service
      POWERTOOLS_DEBUG: false
      STAGE: ${env:STAGE}
    events:
      - httpApi: '*'
    handler: app.main.handler
    layers:
      - arn:aws:lambda:${aws:region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:68
      - Ref: PythonRequirementsLambdaLayer
package:
  patterns:
    - '!.git/**'
    - '!.gitignore'
    - '!.DS_Store'
    - '!npm-debug.log'
    - '!.serverless/**'
    - '!.serverless_plugins/**'
    - '!.venv/**'
provider:
  name: aws
  memorySize: 512
  region: ${env:AWS_REGION, 'eu-central-1'}
  runtime: python3.12
  stage: ${opt:stage, 'dev'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
              - postsTable
              - Arn
resources:
  Resources:
    postsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-posts
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: title
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: title
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
useDotenv: true
