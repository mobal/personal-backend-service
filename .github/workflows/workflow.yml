name: Workflow

on: [push]

jobs:
  pycodestyle-and-pytest:
    name: Build
    runs-on: ubuntu-24.04
    env:
      Coverage_File: coverage.xml
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache venv
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-venv-${{ hashFiles('uv.lock') }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        cache-dependency-glob: "uv.lock"
        enable-cache: true

    - name: Install project dependencies
      run: uv sync --locked

    - name: Analyze code using Pycodestyle (strict mode)
      run: |
        uv run -m pycodestyle --ignore=E501,W503 app/ tests/ || exit 1

    - name: Run Bandit security scanner
      run: |
        uv run -m bandit --severity-level high --confidence-level high -r app/ -vvv
    
    - name: Running tests with Pytest and generate coverage
      run: |
        uv run -m pytest --cov-report=term --cov-report=xml:$Coverage_File --cov=app

    - name: Fix source path(s) in coverage.xml
      run: |
        sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' coverage.xml

    - name: Scan with SonarCloud
      uses: sonarsource/sonarcloud-github-action@v5
      with:
        args: >
          -Dsonar.language=python
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.sources=app/
          -Dsonar.tests=tests/
          -Dsonar.verbose=true
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
